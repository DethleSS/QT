#ifndef ARRRAY_H
#define ARRRAY_H
#include <vector>
#include <iterator>
#include <stdexcept>
template<class T, std::size_t N>
struct array_traits
{
    typedef T Type[N];
    static T&
         S_ref(const Type& arr, std::size_t n) noexcept
         { return const_cast<T&>(arr[n]); }

         static T*
         S_ptr(const Type& __t) noexcept
         { return const_cast<T*>(__t); }
};

template <class T, std::size_t N>
struct array
{
typedef T                     value_type;
typedef value_type*           pointer;
typedef const value_type*     const_pointer;
typedef value_type&           reference;
typedef const value_type&     const_reference;
typedef value_type*           iterator;
typedef const value_type*     const_iterator;
typedef std::size_t           size_type;
typedef std::ptrdiff_t        difference_type;
typedef std::reverse_iterator<iterator>         reverse_iterator;
typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;
typedef array_traits<T,N> AT_Type;
typename AT_Type::Type m_element;
    reference at(size_type pos )
    {
        if(pos >= N) 
        {
            throw std::out_of_range("Error");
        }
        return AT_Type::S_ref(m_element, pos); 
    }
    reference operator[](size_type pos)
    {
        return AT_Type::S_ref(m_element, pos); 
    }
    
    reference front()
    {
        return AT_Type::S_ref(m_element, 0);
    }
    reference back()
    {
        return AT_Type::S_ref(m_element, N - 1);
    }
    pointer data()
    {
        return AT_Type::S_ptr(m_element);
    }
    

};

#endif // ARRRAY_H
